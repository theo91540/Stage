/* Generated By:JavaCC: Do not edit this line. Compilateur.java */
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import java.lang.Math;

import mirelac.*;

public class Compilateur implements CompilateurConstants {
        public static void main (String[] args) throws ParseException
        {
                try
                {

                        new Compilateur(new java.io.FileReader("../mirela.txt")).SPECIFICATION();

                }
                catch(Throwable e)
                {
                        System.out.println("Syntaxe incorrecte :" + e.getMessage());
                }
        }

  static final public void SPECIFICATION() throws ParseException {
                       String name; Composant c; Systeme system = new Systeme();
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case ID:
        ;
        break;
      default:
        jj_la1[0] = jj_gen;
        break label_1;
      }
      name = STRING();
      jj_consume_token(17);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case PERIODIC:
        PERIODIC(c = new Periodic(name));
        break;
      case APERIODIC:
        APERIODIC(c = new Aperiodic(name));
        break;
      case FIRST:
        FIRST(c = new First(name));
        break;
      case BOTH:
        BOTH(c = new Both(name));
        break;
      case PRIORITY:
        PRIORITY(c = new Priority(name));
        break;
      case MEMORY:
        MEMORY(c = new Memory(name));
        break;
      case RENDERING:
        RENDERING(c = new Rendering(name));
        break;
      default:
        jj_la1[1] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                 system.addComposant(c);
    }
    jj_consume_token(0);
          system.checkConsistency(); system.generateTargets(); ecrire("../out/mirela.xml", system.toXML());
  }

  static final public void PERIODIC(Composant c) throws ParseException {
                             int minstart, maxstart; int[] min = new int[1], max = new int[1];
    jj_consume_token(PERIODIC);
    jj_consume_token(18);
    minstart = INTEGER();
    jj_consume_token(19);
    maxstart = INTEGER();
    jj_consume_token(20);
    jj_consume_token(21);
    min[0] = INTEGER();
    jj_consume_token(19);
    max[0] = INTEGER();
    jj_consume_token(22);
    TARGETS(c);
         c.setMinStart(minstart);c.setMaxStart(maxstart);c.setMin(min);c.setMax(max);
  }

  static final public void APERIODIC(Composant c) throws ParseException {
                              int[] min = new int[1];
    jj_consume_token(APERIODIC);
    jj_consume_token(18);
    min[0] = INTEGER();
    jj_consume_token(20);
    TARGETS(c);
         c.setMin(min);
  }

  static final public void FIRST(Composant c) throws ParseException {
                          String[] source = new String[1];int[] min = new int[1], max = new int[1];
    jj_consume_token(FIRST);
    jj_consume_token(18);
    source[0] = STRING();
    source = MULTIPLE(source);
    jj_consume_token(21);
    min[0] = INTEGER();
                                                                                           for(int i=0;i<(source.length)-(min.length);i++){min = addInt(min,min[0]);}
    jj_consume_token(19);
    max[0] = INTEGER();
                                                                                                                                                                                               for(int i=0;i<(source.length)-(max.length);i++){max = addInt(max,max[0]);}
    jj_consume_token(22);
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[2] = jj_gen;
        break label_2;
      }
      jj_consume_token(19);
      source = addString(source,STRING());
      source = MULTIPLE(source);
      jj_consume_token(21);
      min = addInt(min,INTEGER());
                                                                                                                                                                                                                                                                                                                                                                                   for(int i=0;i<(source.length)-(min.length);i++){min = addInt(min,min[0]);}
      jj_consume_token(19);
      max = addInt(max,INTEGER());
                                                                                                                                                                                                                                                                                                                                                                                                                                                                                                for(int i=0;i<(source.length)-(max.length);i++){max = addInt(max,max[0]);}
      jj_consume_token(22);
    }
    jj_consume_token(20);
    TARGETS(c);
         c.setSource(source);c.setMin(min);c.setMax(max);
  }

  static final public void BOTH(Composant c) throws ParseException {
                         String[] source = new String[2];int[] min = new int[1], max = new int[1];
    jj_consume_token(BOTH);
    jj_consume_token(18);
    source[0] = STRING();
    jj_consume_token(19);
    source[1] = STRING();
    jj_consume_token(20);
    jj_consume_token(21);
    min[0] = INTEGER();
    jj_consume_token(19);
    max[0] = INTEGER();
    jj_consume_token(22);
    TARGETS(c);
         c.setSource(source);c.setMin(min);c.setMax(max);
  }

  static final public void PRIORITY(Composant c) throws ParseException {
                             String[] source = new String[2];int[] min = new int[2], max = new int[2];
    jj_consume_token(PRIORITY);
    jj_consume_token(18);
    source[0] = STRING();
    jj_consume_token(21);
    min[0] = INTEGER();
    jj_consume_token(19);
    max[0] = INTEGER();
    jj_consume_token(22);
    jj_consume_token(19);
    source[1] = STRING();
    jj_consume_token(21);
    min[1] = INTEGER();
    jj_consume_token(19);
    max[1] = INTEGER();
    jj_consume_token(22);
    jj_consume_token(20);
    TARGETS(c);
         c.setSource(source);c.setMin(min);c.setMax(max);
  }

  static final public void MEMORY(Composant c) throws ParseException {
                           String[] source = new String[1];int[] min = new int[1], max = new int[1];
    jj_consume_token(MEMORY);
    jj_consume_token(18);
    source[0] = STRING();
    jj_consume_token(21);
    min[0] = INTEGER();
    jj_consume_token(19);
    max[0] = INTEGER();
    jj_consume_token(22);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[3] = jj_gen;
        break label_3;
      }
      jj_consume_token(19);
      source = addString(source,STRING());
      jj_consume_token(21);
      min = addInt(min,INTEGER());
      jj_consume_token(19);
      max = addInt(max,INTEGER());
      jj_consume_token(22);
    }
    jj_consume_token(20);
    TARGETS(c);
         c.setSource(source);c.setMin(min);c.setMax(max);
  }

  static final public void RENDERING(Composant c) throws ParseException {
                              String[] source = new String[1]; int minstart, maxstart; int[] min = new int[1], max = new int[1];
    jj_consume_token(RENDERING);
    jj_consume_token(18);
    source[0] = STRING();
    jj_consume_token(20);
    jj_consume_token(18);
    minstart = INTEGER();
    jj_consume_token(19);
    maxstart = INTEGER();
    jj_consume_token(20);
    jj_consume_token(21);
    min[0] = INTEGER();
    jj_consume_token(19);
    max[0] = INTEGER();
    jj_consume_token(22);
    label_4:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 23:
        ;
        break;
      default:
        jj_la1[4] = jj_gen;
        break label_4;
      }
      jj_consume_token(23);
    }
         c.setSource(source);c.setMinStart(minstart);c.setMaxStart(maxstart);c.setMin(min);c.setMax(max);
  }

  static final public void TARGETS(Composant c) throws ParseException {
                            String[] cible = new String[1];
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 24:
      jj_consume_token(24);
      jj_consume_token(18);
      cible[0] = STRING();
      label_5:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 19:
          ;
          break;
        default:
          jj_la1[5] = jj_gen;
          break label_5;
        }
        jj_consume_token(19);
        cible = addString(cible,STRING());
      }
      jj_consume_token(20);
      label_6:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          ;
          break;
        default:
          jj_la1[6] = jj_gen;
          break label_6;
        }
        jj_consume_token(23);
      }
         c.setTarget(cible);
      break;
    default:
      jj_la1[8] = jj_gen;
      label_7:
      while (true) {
        switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
        case 23:
          ;
          break;
        default:
          jj_la1[7] = jj_gen;
          break label_7;
        }
        jj_consume_token(23);
      }
    }
  }

  static final public String[] MULTIPLE(String[] source) throws ParseException {
    label_8:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 19:
        ;
        break;
      default:
        jj_la1[9] = jj_gen;
        break label_8;
      }
      jj_consume_token(19);
      source = addString(source,STRING());
    }
         {if (true) return source;}
    throw new Error("Missing return statement in function");
  }

  static final public int INTEGER() throws ParseException {
                Token n;
    n = jj_consume_token(INT);
                 {if (true) return Integer.parseInt(n.image);}
    throw new Error("Missing return statement in function");
  }

  static final public String STRING() throws ParseException {
                  Token s;
    s = jj_consume_token(ID);
                {if (true) return s.toString();}
    throw new Error("Missing return statement in function");
  }

  static final public void ecrire(String nomFic, String texte) throws ParseException {
         String adressedufichier = System.getProperty("user.dir") + "/"+ nomFic;

        try
        {
                FileWriter fw = new FileWriter(adressedufichier, false);
                BufferedWriter output = new BufferedWriter(fw);
                output.write(texte);
                output.flush();
                output.close();
                System.out.println("Compilation r\u00e9ussie");
        }
        catch(IOException ioe)
        {
                System.out.print("Erreur : ");
                ioe.printStackTrace();
        }
  }

  static final public int[] addInt(int[] tab, int n) throws ParseException {
         int[] temp = new int[tab.length+1];
        for(int i=0;i<tab.length;i++){
                temp[i]=tab[i];
        }
        temp[tab.length]=n;
        {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  static final public String[] addString(String[] tab, String s) throws ParseException {
         String[] temp = new String[tab.length+1];
        for(int i=0;i<tab.length;i++){
                temp[i]=tab[i];
        }
        temp[tab.length]=s;
        {if (true) return temp;}
    throw new Error("Missing return statement in function");
  }

  static private boolean jj_initialized_once = false;
  /** Generated Token Manager. */
  static public CompilateurTokenManager token_source;
  static SimpleCharStream jj_input_stream;
  /** Current token. */
  static public Token token;
  /** Next token. */
  static public Token jj_nt;
  static private int jj_ntk;
  static private int jj_gen;
  static final private int[] jj_la1 = new int[10];
  static private int[] jj_la1_0;
  static {
      jj_la1_init_0();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x10000,0x7f00,0x80000,0x80000,0x800000,0x80000,0x800000,0x800000,0x1000000,0x80000,};
   }

  /** Constructor with InputStream. */
  public Compilateur(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Compilateur(java.io.InputStream stream, String encoding) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser.  ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new CompilateurTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  static public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor. */
  public Compilateur(java.io.Reader stream) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new CompilateurTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  static public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Constructor with generated Token Manager. */
  public Compilateur(CompilateurTokenManager tm) {
    if (jj_initialized_once) {
      System.out.println("ERROR: Second call to constructor of static parser. ");
      System.out.println("       You must either use ReInit() or set the JavaCC option STATIC to false");
      System.out.println("       during parser generation.");
      throw new Error();
    }
    jj_initialized_once = true;
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  /** Reinitialise. */
  public void ReInit(CompilateurTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 10; i++) jj_la1[i] = -1;
  }

  static private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }


/** Get the next Token. */
  static final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  static final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  static private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  static private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  static private int[] jj_expentry;
  static private int jj_kind = -1;

  /** Generate ParseException. */
  static public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[25];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 10; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 25; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  static final public void enable_tracing() {
  }

  /** Disable tracing. */
  static final public void disable_tracing() {
  }

}
